import cv2
import numpy as np
from csv import DictWriter, DictReader

# Initialize global variables
points = []
frame_points = {}
global field_names
field_names = ["Sl. No.", "ID", "scale_point1", "scale_point2", "point1", "point2", "point3", "takeoff", "landing", "angle_point1", "angle_point2", "time", "","frames"]

# Mouse callback function to get coordinates
def get_coordinates(event, x, y, flags, param):
    if event == cv2.EVENT_LBUTTONDOWN:
        frame_number = param[0]
        frame_points[frame_number] = (x, y)
        points.append((frame_number, (x, y)))
        print(f"Point selected on frame {frame_number}: {(x, y)}")

# Function to extract frame
def extract_frame(video_path, frame_number):
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print("Error opening video file")
        return None
    cap.set(cv2.CAP_PROP_POS_FRAMES, frame_number)
    ret, frame = cap.read()
    cap.release()
    if not ret:
        print(f"Error reading frame {frame_number}")
        return None
    return frame

# Function to handle point selection
def select_points(video_path, frames_to_select):
    global points, frame_points
    points = []  # Reset points for each selection set
    frame_points = {}  # Reset frame_points for each selection set

    for frame_number in frames_to_select:
        frame = extract_frame(video_path, frame_number)
        if frame is not None:
            window_name = f'Frame {frame_number}'
            cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)  # Allow window resizing
            cv2.imshow(window_name, frame)
            cv2.setMouseCallback(window_name, get_coordinates, (frame_number,))
            
            # Wait until a point is selected
            while frame_number not in frame_points:
                cv2.waitKey(1)

            cv2.destroyWindow(window_name)

# Function to check if ID exists in the CSV
def is_unique_id(video_id):
    try:
        with open('add name of csv file', 'r', newline='') as f_object:
            reader = DictReader(f_object)
            for row in reader:
                if row["ID"] == video_id:
                    return False
    except FileNotFoundError:
        # If file doesn't exist yet, it's safe to assume the ID is unique
        return True
    return True

# Function to write to CSV
def write_to_csv(data):
    with open('BookTaru.csv', 'a', newline='') as f_object:
        dictwriter_object = DictWriter(f_object, fieldnames=field_names)
        dictwriter_object.writerow(data)
        print("Data written to CSV:", data)

# Main function
def main():
    video_path = r"add video path"
    video_id = video_path[-12:-4]# Extract ID from the video path
    
    #if not is_unique_id(video_id):
     #   print(f"ID {video_id} already exists in the CSV. Skipping entry.")
      #  return  # Exit if ID is not unique

    # First set of frames (original functionality)
    frames_to_select_1 = [1,2,23,40,55,71,110]
    select_points(video_path, frames_to_select_1)
    
    if len(points) >= len(frames_to_select_1):
        # Extract distance points
        (frame_number1, point1), (frame_number2, point2), (frame_number3, point3), (frame_number4, point4), (frame_number5, point5), (frame_number6, point6), (frame_number7, point7) = points[:7]
        cap = cv2.VideoCapture(video_path)
        time1 = (frames_to_select_1[5] - frames_to_select_1[2]) / cap.get(cv2.CAP_PROP_FPS)
        #time1 = (frames_to_select_1[5] - frames_to_select_1[3]) / cap.get(cv2.CAP_PROP_FPS)
        cap.release()
        print(f"Time1 calculated: {time1:.2f} seconds")

    # Second set of frames (additional points, for angle calculation or other uses)
    frames_to_select_2 = [frames_to_select_1[5], frames_to_select_1[5] + 5]
    select_points(video_path, frames_to_select_2)
    (frame_number8, angle_point1), (frame_number9, angle_point2) = points[0:2]

    f=[]
    f.extend(frames_to_select_1)
    f.extend(frames_to_select_2)
    # Create the dictionary to write to CSV
    data = {
        "Sl. No.": "",  # This can be auto-generated by Excel or left blank
        "ID": video_id,
        "scale_point1": point1,
        "scale_point2": point2,
        "point1": point3,
        "point2": point4,
        "point3": point5,
        "takeoff": point6,
        "landing": point7,
        "angle_point1": angle_point1,
        "angle_point2": angle_point2,
        "time": f"{time1:.2f}",
        "frames": f
    }

    write_to_csv(data)


if __name__ == "__main__":
    main()
    print("DONE")
